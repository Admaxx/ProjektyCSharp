// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace JustTalk.justTalkModels;

public partial class justTalkContext : DbContext
{
    public justTalkContext()
    {
    }

    public justTalkContext(DbContextOptions<justTalkContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actualmessage> Actualmessages { get; set; }

    public virtual DbSet<Archivemessage> Archivemessages { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseMySql("server=localhost;database=justtalk;uid=justTalkUser;pwd=eldoNaWolno", Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.40-mysql"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Actualmessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("actualmessages");

            entity.Property(e => e.InsertedData).HasColumnType("datetime");
            entity.Property(e => e.MessageText)
                .IsRequired()
                .HasColumnType("text");
        });

        modelBuilder.Entity<Archivemessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("archivemessages");

            entity.Property(e => e.InsertedData).HasColumnType("datetime");
            entity.Property(e => e.MessageText)
                .IsRequired()
                .HasColumnType("text");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("users");

            entity.HasIndex(e => e.Id, "Id_UNIQUE").IsUnique();

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Nick)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PlayableNick)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UserCreated)
                .HasDefaultValueSql("'2005-04-02 21:37:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.UserLastTimeLogged)
                .HasDefaultValueSql("'2005-04-02 21:37:00'")
                .HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}